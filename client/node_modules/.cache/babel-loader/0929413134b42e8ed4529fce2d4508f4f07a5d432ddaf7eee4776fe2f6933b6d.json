{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserDataService from '@/services/UserDataService';\nexport default {\n  name: 'LoginPage',\n  data() {\n    return {\n      user: {\n        email: '',\n        password: ''\n      },\n      errorOccurs: false,\n      errorMessage: ''\n    };\n  },\n  methods: {\n    login() {\n      // TODO : Login logic\n      UserDataService.postLogin(this.user).then(response => {\n        console.log(response.data);\n        // localStorage.setItem('token', response.data.token)\n        this.$store.dispatch('user', response.data.user);\n        this.$router.push({\n          name: 'home'\n        });\n      }).catch(error => {\n        // Handle the error here\n        this.message = error.response.data.message;\n        // console.log(error.response.data.body.message)\n      });\n    }\n  },\n\n  created() {\n    document.title = 'Todo GPT - Login';\n  }\n};","map":{"version":3,"names":["UserDataService","name","data","user","email","password","errorOccurs","errorMessage","methods","login","postLogin","then","response","console","log","$store","dispatch","$router","push","catch","error","message","created","document","title"],"sources":["C:\\Users\\natha\\Desktop\\todo_gpt\\client\\src\\views\\LoginPage.vue"],"sourcesContent":["<template>\r\n  <h2 class=\"text-center mb-4\">Login</h2>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-md-6\">\r\n      <form @submit.prevent=\"login\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"email\" class=\"form-label\">Email address</label>\r\n          <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"email\" placeholder=\"name@example.com\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" v-model=\"password\" placeholder=\"enter your password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n          <div v-if=\"isCredentialsInvalid\" class=\"text-danger\">Credentials are invalid</div>\r\n        </div>\r\n      </form>\r\n      <div class=\"text-center mt-3\">\r\n        <p>Don't have an account? <router-link to=\"/register\">Register here</router-link></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserDataService from '@/services/UserDataService'\r\n\r\nexport default {\r\n  name: 'LoginPage',\r\n  data () {\r\n    return {\r\n      user: {\r\n        email: '',\r\n        password: ''\r\n      },\r\n      errorOccurs: false,\r\n      errorMessage: ''\r\n    }\r\n  },\r\n  methods: {\r\n    login () {\r\n      // TODO : Login logic\r\n      UserDataService.postLogin(this.user)\r\n        .then(response => {\r\n          console.log(response.data)\r\n          // localStorage.setItem('token', response.data.token)\r\n          this.$store.dispatch('user', response.data.user)\r\n          this.$router.push({ name: 'home' })\r\n        })\r\n        .catch(error => {\r\n          // Handle the error here\r\n          this.message = error.response.data.message\r\n          // console.log(error.response.data.body.message)\r\n        })\r\n    }\r\n  },\r\n  created () {\r\n    document.title = 'Todo GPT - Login'\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AA0BA,OAAOA,eAAc,MAAO,4BAA2B;AAEvD,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,KAAIA,CAAA,EAAK;MACP;MACAT,eAAe,CAACU,SAAS,CAAC,IAAI,CAACP,IAAI,EAChCQ,IAAI,CAACC,QAAO,IAAK;QAChBC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACV,IAAI;QACzB;QACA,IAAI,CAACa,MAAM,CAACC,QAAQ,CAAC,MAAM,EAAEJ,QAAQ,CAACV,IAAI,CAACC,IAAI;QAC/C,IAAI,CAACc,OAAO,CAACC,IAAI,CAAC;UAAEjB,IAAI,EAAE;QAAO,CAAC;MACpC,CAAC,EACAkB,KAAK,CAACC,KAAI,IAAK;QACd;QACA,IAAI,CAACC,OAAM,GAAID,KAAK,CAACR,QAAQ,CAACV,IAAI,CAACmB,OAAM;QACzC;MACF,CAAC;IACL;EACF,CAAC;;EACDC,OAAMA,CAAA,EAAK;IACTC,QAAQ,CAACC,KAAI,GAAI,kBAAiB;EACpC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}