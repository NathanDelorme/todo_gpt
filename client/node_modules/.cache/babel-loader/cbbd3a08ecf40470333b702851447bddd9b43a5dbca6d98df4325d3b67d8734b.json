{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport UserDataService from '@/services/UserDataService';\nimport router from '@/routers';\nimport TodolistDataService from '@/services/TodolistDataService';\nexport default {\n  name: 'LoginPage',\n  props: ['user'],\n  data() {\n    return {\n      userLog: {\n        email: '',\n        password: ''\n      },\n      errorOccurs: false,\n      errorMessage: ''\n    };\n  },\n  methods: {\n    login() {\n      UserDataService.postLogin(this.userLog).then(response => {\n        this.$store.dispatch('user', response.data.user);\n        TodolistDataService.getAll().then(response => {\n          this.$store.dispatch('todolistList', response.data.todolists);\n        }).catch(error => {});\n        this.errorOccurs = false;\n        this.errorMessage = '';\n        router.push({\n          path: 'home'\n        });\n      }).catch(error => {\n        if (error.response && error.response.data) {\n          this.errorMessage = error.response.data.message;\n        } else {\n          this.errorMessage = 'An error occurred while processing the request.';\n        }\n        this.errorOccurs = true;\n      });\n    }\n  },\n  created() {\n    document.title = 'Todo GPT - Login';\n  }\n};","map":{"version":3,"names":["UserDataService","router","TodolistDataService","name","props","data","userLog","email","password","errorOccurs","errorMessage","methods","login","postLogin","then","response","$store","dispatch","user","getAll","todolists","catch","error","push","path","message","created","document","title"],"sources":["C:\\Users\\natha\\Desktop\\todo_gpt\\client\\src\\views\\LoginPage.vue"],"sourcesContent":["<template>\r\n  <h2 class=\"text-center mb-4\">Login</h2>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-md-6\">\r\n      <form @submit.prevent=\"login\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"email\" class=\"form-label\">Email address</label>\r\n          <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"userLog.email\" placeholder=\"name@example.com\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" v-model=\"userLog.password\" placeholder=\"enter your password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n          <div v-if=\"errorOccurs\" class=\"text-danger\">{{ errorMessage }}</div>\r\n        </div>\r\n      </form>\r\n      <div class=\"text-center mt-3\">\r\n        <p>Don't have an account? <router-link to=\"/register\">Register here</router-link></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserDataService from '@/services/UserDataService'\r\nimport router from '@/routers'\r\nimport TodolistDataService from '@/services/TodolistDataService'\r\n\r\nexport default {\r\n  name: 'LoginPage',\r\n  props: ['user'],\r\n  data () {\r\n    return {\r\n      userLog: {\r\n        email: '',\r\n        password: ''\r\n      },\r\n      errorOccurs: false,\r\n      errorMessage: ''\r\n    }\r\n  },\r\n  methods: {\r\n    login () {\r\n      UserDataService.postLogin(this.userLog).then(response => {\r\n        this.$store.dispatch('user', response.data.user)\r\n\r\n        TodolistDataService.getAll().then(response => {\r\n          this.$store.dispatch('todolistList', response.data.todolists)\r\n        }).catch(error => {\r\n\r\n        })\r\n\r\n        this.errorOccurs = false\r\n        this.errorMessage = ''\r\n        router.push({ path: 'home' })\r\n      }).catch(error => {\r\n        if (error.response && error.response.data) {\r\n          this.errorMessage = error.response.data.message\r\n        } else {\r\n          this.errorMessage = 'An error occurred while processing the request.'\r\n        }\r\n        this.errorOccurs = true\r\n      })\r\n    }\r\n  },\r\n  created () {\r\n    document.title = 'Todo GPT - Login'\r\n  }\r\n}\r\n</script>\r\n"],"mappings":";AA0BA,OAAOA,eAAc,MAAO,4BAA2B;AACvD,OAAOC,MAAK,MAAO,WAAU;AAC7B,OAAOC,mBAAkB,MAAO,gCAA+B;AAE/D,eAAe;EACbC,IAAI,EAAE,WAAW;EACjBC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,OAAO,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE;IAChB;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,KAAIA,CAAA,EAAK;MACPZ,eAAe,CAACa,SAAS,CAAC,IAAI,CAACP,OAAO,CAAC,CAACQ,IAAI,CAACC,QAAO,IAAK;QACvD,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,MAAM,EAAEF,QAAQ,CAACV,IAAI,CAACa,IAAI;QAE/ChB,mBAAmB,CAACiB,MAAM,EAAE,CAACL,IAAI,CAACC,QAAO,IAAK;UAC5C,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,cAAc,EAAEF,QAAQ,CAACV,IAAI,CAACe,SAAS;QAC9D,CAAC,CAAC,CAACC,KAAK,CAACC,KAAI,IAAK,CAElB,CAAC;QAED,IAAI,CAACb,WAAU,GAAI,KAAI;QACvB,IAAI,CAACC,YAAW,GAAI,EAAC;QACrBT,MAAM,CAACsB,IAAI,CAAC;UAAEC,IAAI,EAAE;QAAO,CAAC;MAC9B,CAAC,CAAC,CAACH,KAAK,CAACC,KAAI,IAAK;QAChB,IAAIA,KAAK,CAACP,QAAO,IAAKO,KAAK,CAACP,QAAQ,CAACV,IAAI,EAAE;UACzC,IAAI,CAACK,YAAW,GAAIY,KAAK,CAACP,QAAQ,CAACV,IAAI,CAACoB,OAAM;QAChD,OAAO;UACL,IAAI,CAACf,YAAW,GAAI,iDAAgD;QACtE;QACA,IAAI,CAACD,WAAU,GAAI,IAAG;MACxB,CAAC;IACH;EACF,CAAC;EACDiB,OAAMA,CAAA,EAAK;IACTC,QAAQ,CAACC,KAAI,GAAI,kBAAiB;EACpC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}