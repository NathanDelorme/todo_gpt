{"ast":null,"code":"import TodolistDataService from '@/services/TodolistDataService';\nimport TaskComponent from '@/components/TaskComponent';\nimport TaskCreatorComponent from '@/components/TaskCreatorComponent';\nexport default {\n  components: {\n    TaskCreatorComponent,\n    TaskComponent\n  },\n  props: ['user', 'todolists', 'tasks', 'id', 'isEditing', 'showTasks'],\n  data() {\n    return {\n      todolist: this.todolists.find(item => item.idTodolist === this.id),\n      localIsEditing: this.isEditing,\n      localShowTasks: this.showTasks\n    };\n  },\n  computed: {\n    getTasksUrgentPourcentage() {\n      if (this.tasks === null || this.tasks === undefined || this.tasks[this.id] === null || this.tasks[this.id] === undefined || this.tasks[this.id].length === 0) {\n        return 0;\n      }\n      console.log('1:' + this.tasks[this.id].filter(item => item.priority === 2 && item.isFinished === true).length * 100 / this.tasks[this.id].length);\n      return this.tasks[this.id].filter(item => item.priority === 2 && item.isFinished === true).length * 100 / this.tasks[this.id].length;\n    },\n    getTasksImportantPourcentage() {\n      if (this.tasks === null || this.tasks === undefined || this.tasks[this.id] === null || this.tasks[this.id] === undefined || this.tasks[this.id].length === 0) {\n        return 0;\n      }\n      console.log('2:' + this.tasks[this.id].filter(item => item.priority === 1 && item.isFinished === true).length * 100 / this.tasks[this.id].length);\n      return this.tasks[this.id].filter(item => item.priority === 1 && item.isFinished === true).length * 100 / this.tasks[this.id].length;\n    },\n    getTasksNotImportantPourcentage() {\n      if (this.tasks === null || this.tasks === undefined || this.tasks[this.id] === null || this.tasks[this.id] === undefined || this.tasks[this.id].length === 0) {\n        return 0;\n      }\n      console.log('3:' + this.tasks[this.id].filter(item => item.priority === 0 && item.isFinished === true).length * 100 / this.tasks[this.id].length);\n      return this.tasks[this.id].filter(item => item.priority === 0 && item.isFinished === true).length * 100 / this.tasks[this.id].length;\n    }\n  },\n  watch: {\n    tasks: {\n      deep: true,\n      handler() {\n        this.getTasksUrgentPourcentage = this.calculateTasksUrgentPourcentage();\n        this.getTasksImportantPourcentage = this.calculateTasksImportantPourcentage();\n        this.getTasksNotImportantPourcentage = this.calculateTasksNotImportantPourcentage();\n      }\n    }\n  },\n  methods: {\n    deleteTodolist() {\n      TodolistDataService.delete(Number(this.id)).then(response => {\n        TodolistDataService.getAllOfUser(this.user.idUser).then(response => {\n          this.$store.dispatch('todolists', response.data.todolists);\n        });\n      });\n    },\n    updateTodolist() {\n      this.todolist.lastModifiedDate = new Date();\n      TodolistDataService.update(Number(this.id), this.todolist).then(response => {\n        console.log(response);\n      });\n    },\n    toggleEdit() {\n      this.localIsEditing = !this.localIsEditing;\n      if (!this.localIsEditing) {\n        this.updateTodolist();\n      }\n    },\n    toggleTasks() {\n      this.localShowTasks = !this.localShowTasks;\n    }\n  }\n};","map":{"version":3,"names":["TodolistDataService","TaskComponent","TaskCreatorComponent","components","props","data","todolist","todolists","find","item","idTodolist","id","localIsEditing","isEditing","localShowTasks","showTasks","computed","getTasksUrgentPourcentage","tasks","undefined","length","console","log","filter","priority","isFinished","getTasksImportantPourcentage","getTasksNotImportantPourcentage","watch","deep","handler","calculateTasksUrgentPourcentage","calculateTasksImportantPourcentage","calculateTasksNotImportantPourcentage","methods","deleteTodolist","delete","Number","then","response","getAllOfUser","user","idUser","$store","dispatch","updateTodolist","lastModifiedDate","Date","update","toggleEdit","toggleTasks"],"sources":["C:\\Users\\natha\\Desktop\\todo_gpt\\client\\src\\components\\TodoListComponent.vue"],"sourcesContent":["<template>\r\n  <div class=\"mb-3\">\r\n    <div class=\"card text-center\">\r\n      <div class=\"card-header text-muted\">{{ todolist.lastModifiedDate }}</div>\r\n      <div class=\"card-body\">\r\n        <div>\r\n          <h5 class=\"card-title\" v-if=\"!localIsEditing\">{{ todolist.title }}</h5>\r\n          <input type=\"text\" class=\"form-control text-center\" v-if=\"localIsEditing\" v-model=\"todolist.title\">\r\n        </div>\r\n        <p>{{ tasks[this.id] }}</p>\r\n        <div>\r\n          <p class=\"card-text lh-base\" style=\"white-space: pre-line;\" v-if=\"!localIsEditing\">{{ todolist.description }}</p>\r\n          <textarea class=\"form-control text-center\" v-if=\"localIsEditing\" v-model=\"todolist.description\"></textarea>\r\n        </div>\r\n        <br>\r\n        <div class=\"progress\">\r\n\r\n          <div class=\"progress-bar\" role=\"progressbar\" :style=\"'width: ' + getTasksUrgentPourcentage + '%; background-color: darkred'\"></div>\r\n          <div class=\"progress-bar\" role=\"progressbar\" :style=\"'width: ' + getTasksImportantPourcentage + '%; background-color: darkorange'\"></div>\r\n          <div class=\"progress-bar\" role=\"progressbar\" :style=\"'width: ' + getTasksNotImportantPourcentage + '%; background-color: forestgreen'\"></div>\r\n\r\n        </div>\r\n        <br>\r\n        <br>\r\n        <div class=\"btn-group\" role=\"group\">\r\n          <input type=\"checkbox\" class=\"btn-check\" :id=\"'toggleTasks' + todolist.idTodolist\"  autocomplete=\"off\" @click=\"toggleTasks\">\r\n          <label class=\"btn btn-primary\" :for=\"'toggleTasks' + todolist.idTodolist\">{{ localShowTasks ? 'Hide tasks' : 'Show tasks' }}</label><br>\r\n          <input type=\"checkbox\" class=\"btn-check\" :id=\"'toggleEditing' + todolist.idTodolist\" autocomplete=\"off\" @click=\"toggleEdit\">\r\n          <label class=\"btn btn-warning\" :for=\"'toggleEditing' + todolist.idTodolist\">{{ localIsEditing ? 'Save' : 'Modify' }}</label><br>\r\n          <button class=\"btn btn-danger\" @click.stop=\"deleteTodolist\">Delete</button>\r\n        </div>\r\n        <div v-if=\"localShowTasks\" class=\"text-start\">\r\n          <hr>\r\n          <div class=\"d-grid mb-3\">\r\n            <TaskCreatorComponent :tasks=\"tasks\" :todolistID=\"id\"/>\r\n          </div>\r\n          <TaskComponent class=\"mb-3\"\r\n                         v-for=\"(task) in tasks[this.id]\"\r\n                         :key=\"task.idTask\"\r\n                         :id=\"task.idTask\"\r\n                         :tasks=\"tasks\"\r\n                         :user=\"user\"\r\n                         :todolists=\"todolists\"\r\n                         :todolistId=\"this.id\"\r\n                         :isEditing=\"false\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TodolistDataService from '@/services/TodolistDataService'\r\nimport TaskComponent from '@/components/TaskComponent'\r\nimport TaskCreatorComponent from '@/components/TaskCreatorComponent'\r\n\r\nexport default {\r\n  components: { TaskCreatorComponent, TaskComponent },\r\n  props: ['user', 'todolists', 'tasks', 'id', 'isEditing', 'showTasks'],\r\n  data () {\r\n    return {\r\n      todolist: this.todolists.find(item => item.idTodolist === this.id),\r\n      localIsEditing: this.isEditing,\r\n      localShowTasks: this.showTasks\r\n    }\r\n  },\r\n  computed: {\r\n    getTasksUrgentPourcentage () {\r\n      if (this.tasks === null || this.tasks === undefined || this.tasks[this.id] === null || this.tasks[this.id] === undefined || this.tasks[this.id].length === 0) {\r\n        return 0\r\n      }\r\n      console.log('1:' + this.tasks[this.id].filter(item => item.priority === 2 && item.isFinished === true).length * 100 / this.tasks[this.id].length)\r\n      return this.tasks[this.id].filter(item => item.priority === 2 && item.isFinished === true).length * 100 / this.tasks[this.id].length\r\n    },\r\n    getTasksImportantPourcentage () {\r\n      if (this.tasks === null || this.tasks === undefined || this.tasks[this.id] === null || this.tasks[this.id] === undefined || this.tasks[this.id].length === 0) {\r\n        return 0\r\n      }\r\n      console.log('2:' + this.tasks[this.id].filter(item => item.priority === 1 && item.isFinished === true).length * 100 / this.tasks[this.id].length)\r\n      return this.tasks[this.id].filter(item => item.priority === 1 && item.isFinished === true).length * 100 / this.tasks[this.id].length\r\n    },\r\n    getTasksNotImportantPourcentage () {\r\n      if (this.tasks === null || this.tasks === undefined || this.tasks[this.id] === null || this.tasks[this.id] === undefined || this.tasks[this.id].length === 0) {\r\n        return 0\r\n      }\r\n      console.log('3:' + this.tasks[this.id].filter(item => item.priority === 0 && item.isFinished === true).length * 100 / this.tasks[this.id].length)\r\n      return this.tasks[this.id].filter(item => item.priority === 0 && item.isFinished === true).length * 100 / this.tasks[this.id].length\r\n    }\r\n  },\r\n  watch: {\r\n    tasks: {\r\n      deep: true,\r\n      handler () {\r\n        this.getTasksUrgentPourcentage = this.calculateTasksUrgentPourcentage();\r\n        this.getTasksImportantPourcentage = this.calculateTasksImportantPourcentage();\r\n        this.getTasksNotImportantPourcentage = this.calculateTasksNotImportantPourcentage();\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    deleteTodolist () {\r\n      TodolistDataService.delete(Number(this.id)).then(response => {\r\n        TodolistDataService.getAllOfUser(this.user.idUser).then(response => {\r\n          this.$store.dispatch('todolists', response.data.todolists)\r\n        })\r\n      })\r\n    },\r\n    updateTodolist () {\r\n      this.todolist.lastModifiedDate = new Date()\r\n      TodolistDataService.update(Number(this.id), this.todolist).then(response => {\r\n        console.log(response)\r\n      })\r\n    },\r\n    toggleEdit () {\r\n      this.localIsEditing = !this.localIsEditing\r\n      if (!this.localIsEditing) {\r\n        this.updateTodolist()\r\n      }\r\n    },\r\n    toggleTasks () {\r\n      this.localShowTasks = !this.localShowTasks\r\n    }\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}