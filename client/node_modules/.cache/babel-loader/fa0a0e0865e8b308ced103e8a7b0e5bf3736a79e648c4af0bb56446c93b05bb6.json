{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"button\",\n  class: \"btn btn-primary\",\n  \"data-bs-toggle\": \"modal\",\n  \"data-bs-target\": \"#staticBackdrop\"\n}, \"AI Generated To Do List\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"modal fade\",\n  id: \"staticBackdrop\",\n  \"data-bs-backdrop\": \"static\",\n  \"data-bs-keyboard\": \"false\",\n  tabindex: \"-1\"\n};\nconst _hoisted_3 = {\n  class: \"modal-dialog\"\n};\nconst _hoisted_4 = {\n  class: \"modal-content\"\n};\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"modal-header\"\n}, [/*#__PURE__*/_createElementVNode(\"h5\", {\n  class: \"modal-title\"\n}, \"Ask Chat GPT to create a to do list about something :\")], -1 /* HOISTED */);\nconst _hoisted_6 = {\n  class: \"modal-body\"\n};\nconst _hoisted_7 = {\n  class: \"form-group\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"selectOption\"\n}, \"Select a To Do List :\", -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"\",\n  disabled: \"\"\n}, \"Select a To Do List\", -1 /* HOISTED */);\nconst _hoisted_10 = [\"value\"];\nconst _hoisted_11 = {\n  class: \"form-group\"\n};\nconst _hoisted_12 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"questionTextarea\"\n}, \"Describe your desired to do list :\", -1 /* HOISTED */);\nconst _hoisted_13 = {\n  class: \"modal-footer\"\n};\nconst _hoisted_14 = [\"disabled\"];\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"button\",\n  class: \"btn btn-secondary\",\n  \"data-bs-toggle\": \"modal\",\n  \"data-bs-target\": \"#staticBackdrop\"\n}, \"Close\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_hoisted_5, _createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_hoisted_8, _withDirectives(_createElementVNode(\"select\", {\n    class: \"form-control\",\n    id: \"selectOption\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedToDoList = $event)\n  }, [_hoisted_9, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.todolists, (todolist, index) => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: index,\n      value: todolist\n    }, _toDisplayString(todolist.title), 9 /* TEXT, PROPS */, _hoisted_10);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selectedToDoList]])]), _createElementVNode(\"div\", _hoisted_11, [_hoisted_12, _withDirectives(_createElementVNode(\"textarea\", {\n    class: \"form-control\",\n    id: \"questionTextarea\",\n    rows: \"3\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.question = $event),\n    maxlength: \"400\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.question]])])]), _createElementVNode(\"div\", _hoisted_13, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-primary\",\n    disabled: !$data.selectedToDoList || !$data.question,\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.sendRequest && $options.sendRequest(...args)),\n    \"data-bs-toggle\": \"modal\",\n    \"data-bs-target\": \"#staticBackdrop\"\n  }, \"Create tasks\", 8 /* PROPS */, _hoisted_14), _hoisted_15])])])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","type","class","id","tabindex","for","value","disabled","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","$data","selectedToDoList","$event","_hoisted_9","_createElementBlock","_Fragment","_renderList","$props","todolists","todolist","index","key","title","_hoisted_10","_hoisted_11","_hoisted_12","rows","question","maxlength","_hoisted_13","onClick","_cache","args","$options","sendRequest","_hoisted_14","_hoisted_15"],"sources":["C:\\Users\\natha\\Desktop\\todo_gpt\\client\\src\\components\\GPTTaskCreatorComponent.vue"],"sourcesContent":["<template>\r\n  <button type=\"button\" class=\"btn btn-primary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">AI Generated To Do List</button>\r\n\r\n  <div class=\"modal fade\" id=\"staticBackdrop\" data-bs-backdrop=\"static\" data-bs-keyboard=\"false\" tabindex=\"-1\">\r\n    <div class=\"modal-dialog\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">Ask Chat GPT to create a to do list about something :</h5>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <div class=\"form-group\">\r\n            <label for=\"selectOption\">Select a To Do List :</label>\r\n            <select class=\"form-control\" id=\"selectOption\" v-model=\"selectedToDoList\">\r\n              <option value=\"\" disabled>Select a To Do List</option>\r\n              <option v-for=\"(todolist, index) in todolists\" :key=\"index\" :value=\"todolist\">{{ todolist.title }}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"form-group\">\r\n            <label for=\"questionTextarea\">Describe your desired to do list :</label>\r\n            <textarea class=\"form-control\" id=\"questionTextarea\" rows=\"3\" v-model=\"question\" maxlength=\"400\"></textarea>\r\n          </div>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-primary\" :disabled=\"!selectedToDoList || !question\" @click=\"sendRequest\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">Create tasks</button>\r\n          <button type=\"button\" class=\"btn btn-secondary\" data-bs-toggle=\"modal\" data-bs-target=\"#staticBackdrop\">Close</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'GPTTasksCreatorComponent',\r\n  props: ['todolists'],\r\n  emits: ['request-chat-gpt'],\r\n  data () {\r\n    return {\r\n      localTodoLists: this.todolists,\r\n      selectedToDoList: '',\r\n      question: ''\r\n    }\r\n  },\r\n  methods: {\r\n    sendRequest () {\r\n      this.$emit('request-chat-gpt', { selectedTodolist: this.selectedToDoList, question: this.question })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.modal {\r\n  display: none;\r\n}\r\n\r\n.modal-dialog {\r\n  max-width: 80%;\r\n}\r\n\r\n@media (min-width: 576px) {\r\n  .modal-dialog {\r\n    max-width: 60%;\r\n  }\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .modal-dialog {\r\n    max-width: 50%;\r\n  }\r\n}\r\n\r\n@media (min-width: 992px) {\r\n  .modal-dialog {\r\n    max-width: 40%;\r\n  }\r\n}\r\n\r\n@media (min-width: 1200px) {\r\n  .modal-dialog {\r\n    max-width: 30%;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";gCACEA,mBAAA,CAAsI;EAA9HC,IAAI,EAAC,QAAQ;EAACC,KAAK,EAAC,iBAAiB;EAAC,gBAAc,EAAC,OAAO;EAAC,gBAAc,EAAC;GAAkB,yBAAuB;;EAExHA,KAAK,EAAC,YAAY;EAACC,EAAE,EAAC,gBAAgB;EAAC,kBAAgB,EAAC,QAAQ;EAAC,kBAAgB,EAAC,OAAO;EAACC,QAAQ,EAAC;;;EACjGF,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAe;gCACxBF,mBAAA,CAEM;EAFDE,KAAK,EAAC;AAAc,I,aACvBF,mBAAA,CAAkF;EAA9EE,KAAK,EAAC;AAAa,GAAC,uDAAqD,E;;EAE1EA,KAAK,EAAC;AAAY;;EAChBA,KAAK,EAAC;AAAY;gCACrBF,mBAAA,CAAuD;EAAhDK,GAAG,EAAC;AAAc,GAAC,uBAAqB;gCAE7CL,mBAAA,CAAsD;EAA9CM,KAAK,EAAC,EAAE;EAACC,QAAQ,EAAR;GAAS,qBAAmB;;;EAI5CL,KAAK,EAAC;AAAY;iCACrBF,mBAAA,CAAwE;EAAjEK,GAAG,EAAC;AAAkB,GAAC,oCAAkC;;EAI/DH,KAAK,EAAC;AAAc;;iCAEvBF,mBAAA,CAAsH;EAA9GC,IAAI,EAAC,QAAQ;EAACC,KAAK,EAAC,mBAAmB;EAAC,gBAAc,EAAC,OAAO;EAAC,gBAAc,EAAC;GAAkB,OAAK;;;6DAvBrHM,UAAsI,EAEtIR,mBAAA,CAyBM,OAzBNS,UAyBM,GAxBJT,mBAAA,CAuBM,OAvBNU,UAuBM,GAtBJV,mBAAA,CAqBM,OArBNW,UAqBM,GApBJC,UAEM,EACNZ,mBAAA,CAYM,OAZNa,UAYM,GAXJb,mBAAA,CAMM,OANNc,UAMM,GALJC,UAAuD,E,gBACvDf,mBAAA,CAGS;IAHDE,KAAK,EAAC,cAAc;IAACC,EAAE,EAAC,cAAc;+DAAUa,KAAA,CAAAC,gBAAgB,GAAAC,MAAA;MACtEC,UAAsD,G,kBACtDC,mBAAA,CAA2GC,SAAA,QAAAC,WAAA,CAAvEC,MAAA,CAAAC,SAAS,GAA7BC,QAAQ,EAAEC,KAAK;yBAA/BN,mBAAA,CAA2G;MAA3DO,GAAG,EAAED,KAAK;MAAGpB,KAAK,EAAEmB;wBAAaA,QAAQ,CAACG,KAAK,wBAAAC,WAAA;2EAFzCb,KAAA,CAAAC,gBAAgB,E,KAK1EjB,mBAAA,CAGM,OAHN8B,WAGM,GAFJC,WAAwE,E,gBACxE/B,mBAAA,CAA4G;IAAlGE,KAAK,EAAC,cAAc;IAACC,EAAE,EAAC,kBAAkB;IAAC6B,IAAI,EAAC,GAAG;+DAAUhB,KAAA,CAAAiB,QAAQ,GAAAf,MAAA;IAAEgB,SAAS,EAAC;iDAApBlB,KAAA,CAAAiB,QAAQ,E,OAGnFjC,mBAAA,CAGM,OAHNmC,WAGM,GAFJnC,mBAAA,CAA2L;IAAnLC,IAAI,EAAC,QAAQ;IAACC,KAAK,EAAC,iBAAiB;IAAEK,QAAQ,GAAGS,KAAA,CAAAC,gBAAgB,KAAKD,KAAA,CAAAiB,QAAQ;IAAGG,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAE,gBAAc,EAAC,OAAO;IAAC,gBAAc,EAAC;KAAkB,cAAY,iBAAAG,WAAA,GAClLC,WAAsH,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}