{"ast":null,"code":"import UserDataService from '@/services/UserDataService';\nexport default {\n  name: 'RegisterPage',\n  data() {\n    return {\n      user: {\n        email: '',\n        password: ''\n      },\n      emailVerify: '',\n      passwordVerify: '',\n      errorOccurs: false,\n      errorMessage: '',\n      success: false\n    };\n  },\n  methods: {\n    submitForm() {\n      this.success = false;\n      if (this.user.email !== this.emailVerify) {\n        this.errorOccurs = true;\n        this.errorMessage = 'Emails must be similar';\n        return;\n      }\n      if (this.user.password !== this.passwordVerify) {\n        this.errorOccurs = true;\n        this.errorMessage = 'Passwords must be similar';\n        return;\n      }\n      UserDataService.create(this.user).then(response => {\n        // this.$router.push({ name: 'login' })\n        this.success = true;\n        this.errorOccurs = false;\n      }).catch(error => {\n        this.errorOccurs = true;\n        this.errorMessage = error.response.data.message;\n      });\n    }\n  },\n  created() {\n    document.title = 'Todo GPT - Register';\n  }\n};","map":{"version":3,"names":["UserDataService","name","data","user","email","password","emailVerify","passwordVerify","errorOccurs","errorMessage","success","methods","submitForm","create","then","response","catch","error","message","created","document","title"],"sources":["C:\\Users\\natha\\Desktop\\todo_gpt\\client\\src\\views\\RegisterPage.vue"],"sourcesContent":["<template>\r\n  <h2 class=\"text-center mb-4\">Register</h2>\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-md-6\">\r\n      <form @submit.prevent=\"submitForm\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"email\" class=\"form-label\">Email address</label>\r\n          <input type=\"email\" class=\"form-control\" id=\"email\" v-model=\"user.email\" placeholder=\"name@example.com\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"emailVerify\" class=\"form-label\" >Verify Email address</label>\r\n          <input type=\"email\" class=\"form-control\" id=\"emailVerify\" v-model=\"emailVerify\" placeholder=\"name@example.com\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label\">Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"password\" v-model=\"user.password\" placeholder=\"enter your password\" required>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label for=\"passwordVerify\" class=\"form-label\">Verify Password</label>\r\n          <input type=\"password\" class=\"form-control\" id=\"passwordVerify\" v-model=\"passwordVerify\" placeholder=\"enter your password\" required>\r\n        </div>\r\n        <div class=\"d-grid\">\r\n          <button type=\"submit\" class=\"btn btn-primary\">Register</button>\r\n          <div v-if=\"errorOccurs\" class=\"text-danger\">{{ errorMessage }}</div>\r\n          <div v-if=\"success\" class=\"text-success\">Your account has been created. You can login.</div>\r\n        </div>\r\n      </form>\r\n      <div class=\"text-center mt-3\">\r\n        <p>Already have an account? <router-link to=\"/login\">Login here</router-link></p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport UserDataService from '@/services/UserDataService'\r\n\r\nexport default {\r\n  name: 'RegisterPage',\r\n  data () {\r\n    return {\r\n      user: {\r\n        email: '',\r\n        password: ''\r\n      },\r\n      emailVerify: '',\r\n      passwordVerify: '',\r\n      errorOccurs: false,\r\n      errorMessage: '',\r\n      success: false\r\n    }\r\n  },\r\n  methods: {\r\n    submitForm () {\r\n      this.success = false\r\n      if (this.user.email !== this.emailVerify) {\r\n        this.errorOccurs = true\r\n        this.errorMessage = 'Emails must be similar'\r\n        return\r\n      }\r\n      if (this.user.password !== this.passwordVerify) {\r\n        this.errorOccurs = true\r\n        this.errorMessage = 'Passwords must be similar'\r\n        return\r\n      }\r\n\r\n      UserDataService.create(this.user).then(response => {\r\n        // this.$router.push({ name: 'login' })\r\n        this.success = true\r\n        this.errorOccurs = false\r\n      }).catch(error => {\r\n        this.errorOccurs = true\r\n        this.errorMessage = error.response.data.message\r\n      })\r\n    }\r\n  },\r\n  created () {\r\n    document.title = 'Todo GPT - Register'\r\n  }\r\n}\r\n</script>\r\n"],"mappings":"AAmCA,OAAOA,eAAc,MAAO,4BAA2B;AAEvD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,IAAI,EAAE;QACJC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE;MACZ,CAAC;MACDC,WAAW,EAAE,EAAE;MACfC,cAAc,EAAE,EAAE;MAClBC,WAAW,EAAE,KAAK;MAClBC,YAAY,EAAE,EAAE;MAChBC,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,UAASA,CAAA,EAAK;MACZ,IAAI,CAACF,OAAM,GAAI,KAAI;MACnB,IAAI,IAAI,CAACP,IAAI,CAACC,KAAI,KAAM,IAAI,CAACE,WAAW,EAAE;QACxC,IAAI,CAACE,WAAU,GAAI,IAAG;QACtB,IAAI,CAACC,YAAW,GAAI,wBAAuB;QAC3C;MACF;MACA,IAAI,IAAI,CAACN,IAAI,CAACE,QAAO,KAAM,IAAI,CAACE,cAAc,EAAE;QAC9C,IAAI,CAACC,WAAU,GAAI,IAAG;QACtB,IAAI,CAACC,YAAW,GAAI,2BAA0B;QAC9C;MACF;MAEAT,eAAe,CAACa,MAAM,CAAC,IAAI,CAACV,IAAI,CAAC,CAACW,IAAI,CAACC,QAAO,IAAK;QACjD;QACA,IAAI,CAACL,OAAM,GAAI,IAAG;QAClB,IAAI,CAACF,WAAU,GAAI,KAAI;MACzB,CAAC,CAAC,CAACQ,KAAK,CAACC,KAAI,IAAK;QAChB,IAAI,CAACT,WAAU,GAAI,IAAG;QACtB,IAAI,CAACC,YAAW,GAAIQ,KAAK,CAACF,QAAQ,CAACb,IAAI,CAACgB,OAAM;MAChD,CAAC;IACH;EACF,CAAC;EACDC,OAAMA,CAAA,EAAK;IACTC,QAAQ,CAACC,KAAI,GAAI,qBAAoB;EACvC;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}